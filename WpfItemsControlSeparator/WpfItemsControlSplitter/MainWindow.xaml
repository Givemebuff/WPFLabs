<Window x:Class="WpfItemsControlSeparator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:wpfItemsControlSeparator="clr-namespace:WpfItemsControlSeparator"
        Title="MainWindow" Height="550" Width="725" WindowStartupLocation="CenterScreen">
    <Grid IsSharedSizeScope="True">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border Grid.Column="0" BorderThickness="1" BorderBrush="Gray">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" SharedSizeGroup="DescriptionGroup" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0" Text="使用向前绑定的方式判断最前面是否为空，优点是写法简单、估计性能也是最好的，缺点是如果向前插入数据这种方式不会生效。"
                               TextWrapping="Wrap" />
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                        <ItemsControl ItemsSource="{Binding Source}" BorderThickness="1" BorderBrush="Blue"
                                      VerticalAlignment="Stretch">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border Name="Bd" BorderThickness="0,1,0,0" BorderBrush="Red">
                                        <TextBlock Text="{Binding}" />
                                    </Border>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}"
                                                     Value="{x:Null}">
                                            <Setter TargetName="Bd" Property="BorderThickness" Value="0" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Border>
            <Border Grid.Column="1" BorderThickness="1" BorderBrush="Gray">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" SharedSizeGroup="DescriptionGroup" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0"
                               Text="使用AlternationCount和AlternationIndex配合，可绝对这个功能，缺点是AlternationCount和AlternationIndex原本的隔行索引功能被占用。(如果要同时使用隔行索引可以加转换器)"
                               TextWrapping="Wrap" />
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                        <ItemsControl ItemsSource="{Binding Source}" BorderThickness="1" BorderBrush="Blue"
                                      VerticalAlignment="Stretch" AlternationCount="{Binding Source.Count}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border>
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush" Value="Red" />
                                                <Setter Property="BorderThickness" Value="0,1,0,0" />
                                                <Style.Triggers>
                                                    <DataTrigger
                                                        Binding="{Binding Path=(ItemsControl.AlternationIndex), 
                                                   RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"
                                                        Value="0">
                                                        <Setter Property="BorderThickness" Value="0" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                        <TextBlock Text="{Binding}"
                                                   ToolTip="{Binding Path=(ItemsControl.AlternationIndex), 
                                                   RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}" />
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Border>
            <Border Grid.Column="2" BorderThickness="1" BorderBrush="Gray">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" SharedSizeGroup="DescriptionGroup" />
                        <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <TextBlock Grid.Row="0"
                               Text="按照第二种思路自定义附加属性，这样就不用占用原生ItemsControl的属性了。并且可以用附加属性标记出所有的索引号，供其他场景使用。"
                               TextWrapping="Wrap" />
                    <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
                        <ItemsControl ItemsSource="{Binding Source}" BorderThickness="1" BorderBrush="Blue"
                                      VerticalAlignment="Stretch"
                                      wpfItemsControlSeparator:ItemsControlHelper.MarkIndex="True">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <Border>
                                        <Border.Style>
                                            <Style TargetType="{x:Type Border}">
                                                <Setter Property="BorderBrush" Value="Red" />
                                                <Setter Property="BorderThickness" Value="0,1,0,0" />
                                                <Style.Triggers>
                                                    <DataTrigger
                                                        Binding="{Binding Path=(wpfItemsControlSeparator:ItemsControlHelper.ItemIndex), 
                                                   RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"
                                                        Value="0">
                                                        <Setter Property="BorderThickness" Value="0" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Border.Style>
                                        <TextBlock Grid.Row="1" Text="{Binding}"
                                                   ToolTip="{Binding Path=(wpfItemsControlSeparator:ItemsControlHelper.ItemIndex), 
                                                   RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}" />
                                    </Border>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </ScrollViewer>
                </Grid>
            </Border>
        </Grid>
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center">
            <Button Margin="10" Content="向前插入" Click="InsertBtn_OnClick" />
            <Button Margin="10" Content="向后追加" Click="AppendBtn_OnClick" />
            <Button Margin="10" Content="从前删除" Click="DeleteFirst_OnClick" />
            <Button Margin="10" Content="从后删除" Click="DeleteLast_OnClick" />
        </StackPanel>
    </Grid>
</Window>